#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<Windows.h>
#include<conio.h>

void gotoxy(int y, int x)
{
	COORD scrn;
	HANDLE hOuput = GetStdHandle(STD_OUTPUT_HANDLE);
	scrn.X = x; scrn.Y = y;
	SetConsoleCursorPosition(hOuput, scrn);
}

void drawRow(int i)
{
	int j = 0;
	for (j = 0; j < 13; j++)           //行宽度是13
	{
		gotoxy(2 * i, j);
		printf("-\n");
	}
}

void drawCol(int i)
{
	int j = 0;
	for (j = 0; j < 5; j++)           //列高度是5
	{
		gotoxy(j+1, 4*i);
		printf("|\n");
	}
}

void drawChessBoard()
{
	int i = 0;
	for (i = 0; i < 4; i++)
	{
		drawRow(i);
	}

	for (i = 0; i < 4; i++)
	{
		drawCol(i);
	}

}




char chessMap[3][3];
void initChessBoard()
{
	int i = 0, j = 0;
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			chessMap[i][j] = ' ';
		}
	}

}


int isGameOver()                                    //判断游戏是否结束，结束res返回值为1，未结束返回值0
{
	int res = 1;
	int i = 0, j = 0;
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			if (chessMap[i][j] == ' ')
			{
				res = 0;
				return res;
			}
		}
	}
	return res;
}

int x = 6;
int y = 3;

void goUp()
{
	if (y == 1)
	{
		return;
	}
	y -= 2;
	gotoxy(y, x);
}

void goDown()
{
	if (y == 5)
	{
		return;
	}
	y += 2;
	gotoxy(y, x);
}

void goLeft()
{
	if (x == 2)
	{
		return;
	}
	x -= 4;
	gotoxy(y, x);
}

void goRight()
{
	if (x == 10)
	{
		return;
	}
	x += 4;
	gotoxy(y, x);
}

char moveCursor()
{
	int res = kbhit();
	if (res >= 0)
	{
		char ch = getch();
		if (ch == 'w')
		{
			goUp();
		}
		else if (ch == 's')
		{
			goDown();
		}
		else if (ch == 'd')
		{
			goRight();
		}
		else if (ch == 'a')
		{
			goLeft();
		}
		else if (ch == 'q')
		{
		}
			return ch;
		
	}
	return ' ';
}



void manualSelect()
{
	gotoxy(y, x);
	while (1)
	{
		char ch = moveCursor();
		if (ch == 'q')
		{
			int row = (y - 1) / 2;
			int col = (x - 2) / 4;
			if (chessMap[row][col] == ' ')
			{
				chessMap[row][col] = '@';
				gotoxy(2 * row + 1, 4 * col + 2);
				printf("%c\n", chessMap[row][col]);
				break;
			}
		}
	}
}


int checkWin(int n)  //检测是否胜利
{
	char ch = 'o';         //代表计算机棋子
	if (n % 2 == 1)
	{
		ch = '@';
	}
	int res = 0;
	if (chessMap[0][0] == ch &&chessMap[0][1] == ch &&chessMap[0][2] == ch)
	{
		res = 1;
	}
	else if (chessMap[1][0] == ch &&chessMap[1][1] == ch &&chessMap[1][2] == ch)
	{
		res = 1;
	}
	else if (chessMap[2][0] == ch &&chessMap[2][1] == ch &&chessMap[2][2] == ch)
	{
		res = 1;
	}
	else if (chessMap[0][0] == ch &&chessMap[1][0] == ch &&chessMap[2][0] == ch)
	{
		res = 1;
	}
	else if (chessMap[0][1] == ch &&chessMap[1][1] == ch &&chessMap[2][1] == ch)
	{
		res = 1;
	}
	else if (chessMap[0][2] == ch &&chessMap[1][2] == ch &&chessMap[2][2] == ch)
	{
		res = 1;
	}
	else if (chessMap[0][0] == ch &&chessMap[1][1] == ch &&chessMap[2][2] == ch)
	{
		res = 1;
	}
	else if (chessMap[0][2] == ch &&chessMap[1][1] == ch &&chessMap[2][0] == ch)
	{
		res = 1;
	}
	return res;
}

void randSelect()
{
	while (1)
	{
		int num = rand() % 9;
		int row = num / 3;
		int col = num % 3;
		if (chessMap[row][col] == ' ')
		{
			chessMap[row][col] = 'o';
			gotoxy(2 * row + 1, 4 * col + 2);
			printf("%c\n", chessMap[row][col]);
			break;
		}
	}
}



int checkSelfWin()
{
	int i = 0, j = 0;
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			if (chessMap[i][j] == ' ')
			{
				chessMap[i][j] = 'o';
				if (checkWin(0) == 1)
				{
					gotoxy(2 * i + 1, 4 * j + 2);
					printf("%c\n", chessMap[i][j]);
					return 1;
				}
				chessMap[i][j] = ' ';
			}
		}
	}
	return 0;
}


int checkOtherWin()
{
	int i = 0, j = 0;
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			if (chessMap[i][j] == ' ')
			{
				chessMap[i][j] = '@';
				if (checkWin(1) == 1)
				{
					chessMap[i][j] = 'o';
					gotoxy(2 * i + 1, 4 * j + 2);
					printf("%c\n", chessMap[i][j]);
					return 1;
				}
				chessMap[i][j] = ' ';

			}
		 }
	}
		return 0;
}

	void autoSelect()
	{
		
		int res = checkSelfWin();
		if (res == 1)
		{
			return;
		}
		res = checkOtherWin();
		if (res == 1)
		{
			return;
		}
		randSelect();
	}

	int main()
{
	drawChessBoard();
	initChessBoard();

	srand(time(0));
	int n = rand() % 2;

	while (1)
	{
		if (n % 2 == 0)
		{
			autoSelect();

		}
		else
		{
			manualSelect();
		}

		int res = checkWin(n);
		if (res == 1)
		{
			break;
		}
		res =isGameOver();
		if(res == 1)
		{
			printf("Game Over!!!\n");
			break;
		}
		n++;
	}

	return 0;
}
